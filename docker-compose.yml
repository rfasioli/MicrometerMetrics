version: '3.9'
x-default-logging: &logging
  driver: "json-file"
  options:
    max-size: "5m"
    max-file: "2"

networks:
  default:
    name: Micrometer-OTel-Demo
    driver: bridge

volumes:
  mongo_data:
    driver: local
  prometheus_data:
    driver: local

services:
#  application:
#    image: micrometermetrics
#    depends_on:
#      - mongo
#      - rabbit
#      - prometheus
#  "OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE=cumulative",
#  "OTEL_RESOURCE_ATTRIBUTES=service.namespace=opentelemetry-demo",
#  "OTEL_LOGS_EXPORTER=otlp",
#  "OTEL_SERVICE_NAME=adservice",
#  "OTEL_EXPORTER_OTLP_ENDPOINT=http://otelcol:4317",
#  "JAVA_TOOL_OPTIONS=-javaagent:/usr/src/app/opentelemetry-javaagent.jar"
  #    ports:
#      - "8080:8080"

  mongo:
    image: mongo
    restart: always
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: admin123
    volumes:
      - mongo_data:/data/db

  mongo-express:
    image: mongo-express
    restart: always
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: admin123
      ME_CONFIG_MONGODB_URL: mongodb://root:admin123@mongo:27017/

  rabbit:
    image: rabbitmq:3.9-management
    hostname: rabbit
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - ./config/rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf

  # ********************
  # Telemetry Components
  # ********************
  jaeger:
    image: jaegertracing/all-in-one:1.51
    container_name: jaeger
    ports:
      - "16686:16686"         # Jaeger UI
      - "14250:14250"         # Jaeger gRPC
    environment:
      - COLLECTOR_OTLP_ENABLED=true
#    command:
#      - "--memory.max-traces=8000"
#      - "--prometheus.server-url=http://prometheus:9090"
#      - "--prometheus.query.normalize-calls=true"
#      - "--prometheus.query.normalize-duration=true"
#    environment:
#      - METRICS_STORAGE_TYPE=prometheus
#    logging: *logging

  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./src/prometheus/prometheus-config.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
#    command:
#      - --web.console.templates=/etc/prometheus/consoles
#      - --web.console.libraries=/etc/prometheus/console_libraries
#      - --storage.tsdb.retention.time=1h
#      - --config.file=/etc/prometheus/prometheus-config.yml
#      - --storage.tsdb.path=/prometheus
#      - --web.enable-lifecycle
#      - --web.route-prefix=/
#      - --enable-feature=exemplar-storage
#      - --enable-feature=otlp-write-receiver
#    deploy:
#      resources:
#        limits:
#          memory: 300M
#    ports:
#      - "9090:9090"
#    logging: *logging

  otelcol:
    image : otel/opentelemetry-collector-contrib:0.90.1
    container_name: otel-col
    ports:
      - "1888:1888"   # pprof extension
      - "4317:4317"   # OTLP over gRPC receiver
      - "4318:4318"   # OTLP over HTTP receiver
      - "13133:13133" # health_check extension
    volumes:
      - ./src/otelcollector/otelcol-config.yml:/etc/otelcol-config.yml
    depends_on:
      - jaeger
#    deploy:
#      resources:
#        limits:
#          memory: 125M
#    restart: unless-stopped
#    command: [ "--config=/etc/otelcol-config.yml" ]
#    depends_on:
#      - jaeger
#    logging: *logging
#    environment:
#      - ENVOY_PORT

#  # Grafana
#  grafana:
#    image: grafana/grafana:10.2.0
#    container_name: grafana
#    deploy:
#      resources:
#        limits:
#          memory: 100M
#    environment:
#      - "GF_INSTALL_PLUGINS=grafana-opensearch-datasource"
#    volumes:
#      - ./config/grafana/grafana.ini:/etc/grafana/grafana.ini
#      - ./config/grafana/provisioning/:/etc/grafana/provisioning/
#    ports:
#      - "3000:3000"
#    logging: *logging

#  # OpenSearch
#  opensearch:
#    image: opensearchproject/opensearch:latest
#    container_name: opensearch
#    environment:
#      - cluster.name=demo-cluster
#      - node.name=demo-node
#      - bootstrap.memory_lock=true
#      - discovery.type=single-node
#      - "OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m"
#      - "DISABLE_INSTALL_DEMO_CONFdocker compose --profile odd up --force-recreate --remove-orphans --detach
#                                  IG=true"
#      - "DISABLE_SECURITY_PLUGIN=true"
#    ulimits:
#      memlock:
#        soft: -1
#        hard: -1
#      nofile:
#        soft: 65536
#        hard: 65536
#    ports:
#      - "9200:9200"
#    logging: *logging

#  dataprepper:
#    image: opensearchproject/data-prepper:latest
#    volumes:
#      - ./config/opensearch/pipelines.yaml:/usr/share/data-prepper/pipelines/pipelines.yaml
#      - ./config/opensearch/data-prepper-config.yaml:/usr/share/data-prepper/config/data-prepper-config.yaml
#    ports:
#      - "21892"
#    logging: *logging
